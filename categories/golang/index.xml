<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>golang - 分类 - 月霜天的小站</title>
        <link>https://betterfor.github.io/categories/golang/</link>
        <description>golang - 分类 - 月霜天的小站</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 25 Feb 2021 15:15:36 &#43;0800</lastBuildDate><atom:link href="https://betterfor.github.io/categories/golang/" rel="self" type="application/rss+xml" /><item>
    <title>Golang 1.16版本新特性 =&gt; 撤回版本(retract)</title>
    <link>https://betterfor.github.io/2021/02/golang_retract/</link>
    <pubDate>Thu, 25 Feb 2021 15:15:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/02/golang_retract/</guid>
    <description><![CDATA[一般来说，模块作者需要使用一种方法来只是不应该使用某个已发布的模块。 出现一个严重的安全漏洞 不闲不兼容或bug 版本发布错误 出现过模块最新版本为]]></description>
</item><item>
    <title>Uuid</title>
    <link>https://betterfor.github.io/2021/02/uuid/</link>
    <pubDate>Mon, 08 Feb 2021 14:16:15 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/02/uuid/</guid>
    <description><![CDATA[背景 在复杂的分布式系统中，往往需要对大量的数据和消息进行唯一标识。数据日益增长，对数据库需要进行切分，而水平切分数据库需要一个唯一ID来标识]]></description>
</item><item>
    <title>二维数组按行和按列遍历的效率</title>
    <link>https://betterfor.github.io/2021/02/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E6%95%88%E7%8E%87/</link>
    <pubDate>Mon, 08 Feb 2021 10:14:18 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/02/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E6%95%88%E7%8E%87/</guid>
    <description><![CDATA[二维数组的排列顺序 数组在内存中是按行存储的，按行遍历时可以由指向数组的第一个数的指针一直向后遍历，由于二维数组的内存地址是连续的，当前行的尾]]></description>
</item><item>
    <title>使用Navicate连接Oracle失败 ORA-25847:connection to server failed,probable Orable Net admin error</title>
    <link>https://betterfor.github.io/2021/01/oracle_connect/</link>
    <pubDate>Mon, 18 Jan 2021 14:04:32 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/01/oracle_connect/</guid>
    <description><![CDATA[使用Navicate 15连接Oracle数据库出现如下错误 通过查询可知是oci.dll版本太低，使用的11.2版本。因为Navicate是通]]></description>
</item><item>
    <title>并查集</title>
    <link>https://betterfor.github.io/2021/01/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
    <pubDate>Mon, 11 Jan 2021 15:17:18 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/01/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
    <description><![CDATA[并查集 目的: 解决元素分组问题 用途: 1、判断有向图中是否产生环 2、维护无向图的连通性，判断两个点是否在同一个连通块中 操作: 1、初始化: 每个集合]]></description>
</item><item>
    <title>docker安装部署Rocketmq</title>
    <link>https://betterfor.github.io/2021/01/rocketmq/</link>
    <pubDate>Thu, 07 Jan 2021 16:50:55 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/01/rocketmq/</guid>
    <description><![CDATA[RocketMQ 消息队列作为高并发系统的组件之一，能够帮助业务系统解构提高开发效率和系统稳定性。 优势： 削峰填谷：解决瞬时写压力导致的消息丢失、系统崩溃等问]]></description>
</item><item>
    <title>常见的数据结构--chan</title>
    <link>https://betterfor.github.io/2020/12/chan/</link>
    <pubDate>Wed, 09 Dec 2020 10:25:54 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2020/12/chan/</guid>
    <description><![CDATA[介绍一下Golang channel的内部实现，包括channel的数据结构及相关操作的代码实现。 数据结构 1 2 3 4 5 6 7 8 9 10 11 12 13 type hchan struct { qcount]]></description>
</item><item>
    <title>常见的数据结构--map</title>
    <link>https://betterfor.github.io/2020/12/map/</link>
    <pubDate>Mon, 07 Dec 2020 11:09:14 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2020/12/map/</guid>
    <description><![CDATA[很多的业务场景都会用到map，在其他语言可能成为set/集合等，主要就是key:value格式。 1 2 3 4 5 6 7 8 9 10 11 12 13 // A map is just a hash table. The]]></description>
</item><item>
    <title>常见的数据结构--切片</title>
    <link>https://betterfor.github.io/2020/12/slice/</link>
    <pubDate>Mon, 07 Dec 2020 09:18:56 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2020/12/slice/</guid>
    <description><![CDATA[在使用过程中，我们经常会用到数组这一数据结构，而在golang中，提供了数组和切片两种，数组是固定长度的且长度为定值，而切片是可以扩张的数组]]></description>
</item><item>
    <title>常见的数据结构--链表</title>
    <link>https://betterfor.github.io/2020/12/list/</link>
    <pubDate>Sun, 06 Dec 2020 15:19:21 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2020/12/list/</guid>
    <description><![CDATA[提到数据结构，第一个就是链表。通过一组任意的存储单元来存储线性表中的数据元素。 链表 链表：线性表的链式存储 最简单的链表如下： 1 2 3 4 5 6 7 8 9]]></description>
</item></channel>
</rss>
