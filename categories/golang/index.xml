<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 风落云起</title>
    <link>https://betterfor.github.io/categories/golang/</link>
    <description>Recent content in golang on 风落云起</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 25 Nov 2020 15:25:38 +0800</lastBuildDate><atom:link href="https://betterfor.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang源码剖析 准备</title>
      <link>https://betterfor.github.io/2020/11/prestudy/</link>
      <pubDate>Wed, 25 Nov 2020 15:25:38 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/11/prestudy/</guid>
      <description>语言版本 golang 1.15.5
初学golang 1、go语言之旅
2、搭建开发环境
3、有人喜欢看文档，有人喜欢看视频，各凭喜好，找到自己适合的方式了解语法
4、看一本教程
5、过一遍标准库
6、上手一个项目
这些方法步骤学习资料在其他地方已经有很多了，这里就不赘述了。
参考资料 官方标准库
官方标准库中文版
Go语言标准库 (不全)
gopkg (部分)</description>
    </item>
    
    <item>
      <title>golang源码解析目录</title>
      <link>https://betterfor.github.io/2020/11/catelog/</link>
      <pubDate>Wed, 25 Nov 2020 15:01:18 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/11/catelog/</guid>
      <description>学习完golang，上手过几个项目，了解过框架，工具等，怎么提高自己？
我打算从头开始，了解源码的实现
// todo updated
前言</description>
    </item>
    
    <item>
      <title>如何自定义让json解析出自定义值</title>
      <link>https://betterfor.github.io/2020/11/json_example/</link>
      <pubDate>Wed, 25 Nov 2020 09:54:07 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/11/json_example/</guid>
      <description>简介 先来看一下 json.Unmarshal 的注释
大意是 json 解析的时候会调用 Unmarshaler 的接口。那么我们就可以自定义解析数据了。
先看一个例子
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) const textJson = `{&amp;#34;name&amp;#34;:&amp;#34;xiaoming&amp;#34;,&amp;#34;duration&amp;#34;:&amp;#34;5s&amp;#34;}` func main() { var o Object json.Unmarshal([]byte(textJson),&amp;amp;o) fmt.Printf(&amp;#34;%+v\n&amp;#34;,o) } type Object struct { Name string Time time.</description>
    </item>
    
    <item>
      <title>5分钟学会搭建Prometheus</title>
      <link>https://betterfor.github.io/2020/11/prometheus/</link>
      <pubDate>Thu, 19 Nov 2020 18:03:03 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/11/prometheus/</guid>
      <description>简介 prometheus是一个开源的系统监控和警报工具包，最初由SoundCloud开发。自2012年始，许多公司和组织已经采用了prometheus，该项目拥有活跃的开发人员和用户社区。 它现在是一个独立的开源项目，独立于任何公司进行维护。着重于此，prometheus在2016年加入CNCF，是继kubernetes之后第二个托管的项目。
官网地址： Prometheus
github地址： github
架构图
下载与安装 安装方式有很多种，如果你是windows用户，那么只需要在本地起个二进制服务就可以。如果你是linux用户，可以通过docker等更加灵活方式部署。
二进制 二进制下载地址
1 2 3  tar xvfz prometheus-*.tar.gz cd prometheus-* ./prometheus --config.file=prometheus.yml   当然你可以下载最新的源码进行编译获取最新的二进制文件。
1 2 3 4 5 6  mkdir -p $GOPATH/src/github.com/prometheus cd $GOPATH/src/github.com/prometheus git clone https://github.com/prometheus/prometheus.git cd prometheus make build ./prometheus -config.file=your_config.yml   docker 1 2  # 使用 /opt/prometheus/prometheus.yml 的配置 docker run --name prometheus -d -p 127.0.0.1:9090:9090 -v /opt/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus   helm 1 2 3 4 5 6 7 8 9 10  helm repo add prometheus-community https://prometheus-community.</description>
    </item>
    
  </channel>
</rss>
