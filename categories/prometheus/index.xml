<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>prometheus on 风落云起</title>
    <link>https://betterfor.github.io/categories/prometheus/</link>
    <description>Recent content in prometheus on 风落云起</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 20 Nov 2020 15:45:29 +0800</lastBuildDate><atom:link href="https://betterfor.github.io/categories/prometheus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang exporter的使用方法</title>
      <link>https://betterfor.github.io/2020/11/exporter/</link>
      <pubDate>Fri, 20 Nov 2020 15:45:29 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/11/exporter/</guid>
      <description>前言 在开始监控你的服务之前，你需要通过添加prometheus客户端来添加监控。 可以找 第三方exporter 监控你的服务，也可以自己编写exporter。
目前已经有很多不同的语言编写的客户端库，包括官方提供的Go，Java，Python，Ruby。 已有客户端库
在了解编写exporter之前，可以先5分钟学会搭建prometheus
简单的exporter服务 先写一个简单的http服务，在9095端口启动了一个能够为prometheus提供监控指标的HTTP服务。你可以在 http://localhost:9095/metrics 看到这些指标。
1 2 3 4 5 6 7 8 9 10 11 12 13 14  package main import ( &amp;#34;github.com/prometheus/client_golang/prometheus/promhttp&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.HandleFunc(&amp;#34;/&amp;#34;, func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(&amp;#34;hello world&amp;#34;)) }) http.Handle(&amp;#34;/metrics&amp;#34;,promhttp.Handler()) http.ListenAndServe(&amp;#34;:9095&amp;#34;,nil) }   虽然偶尔会手动访问/metrics页面查看指标数据，但是将指标数据导入prometheus才方便。
1 2 3 4 5 6 7 8 9 10  global:scrape_interval:15s# 默认抓取间隔，15s向目标抓取一次数据external_labels:monitor:&amp;#39;prometheus-monitor&amp;#39;# 抓取对象scrape_configs:- job_name:&amp;#39;exporter&amp;#39;# 名称，会在每一条metrics添加标签{job_name:&amp;#34;prometheus&amp;#34;}scrape_interval:5s# 抓取时间static_configs:# 抓取对象- targets:[&amp;#39;localhost:9095&amp;#39;]  那么在 http://localhost:9090/ 浏览器输入 PromQL 表达式 go_info,就会看到如图的结果 监控指标 Counter(计数器类型) Counter记录的是事件的数量或大小，只增不减，除非发生重置。</description>
    </item>
    
  </channel>
</rss>
