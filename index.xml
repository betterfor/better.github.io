<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>月霜天的小站</title>
        <link>https://blog.luxgreat.tk/</link>
        <description>月霜天的小站</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 27 Jun 2022 09:40:41 &#43;0800</lastBuildDate>
            <atom:link href="https://blog.luxgreat.tk/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Harbor源码架构解析</title>
    <link>https://blog.luxgreat.tk/2022/06/harbor%E6%BA%90%E7%A0%81%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/</link>
    <pubDate>Mon, 27 Jun 2022 09:40:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2022/06/harbor%E6%BA%90%E7%A0%81%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/</guid>
    <description><![CDATA[Harbor源码分析之Core组件 版本：v1.10.11 一、core目录架构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ tree -L 1 . ├── api ├── auth ├─]]></description>
</item><item>
    <title>client-go架构</title>
    <link>https://blog.luxgreat.tk/2022/03/client-go/</link>
    <pubDate>Mon, 07 Mar 2022 13:32:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2022/03/client-go/</guid>
    <description><![CDATA[以下是client-go的官方架构图 一、Indexer Indexer保存来自api-server的资源，使用list-watch方式来维护资]]></description>
</item><item>
    <title>client-go之队列</title>
    <link>https://blog.luxgreat.tk/2022/03/03-deltafifo/</link>
    <pubDate>Mon, 07 Mar 2022 13:32:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2022/03/03-deltafifo/</guid>
    <description><![CDATA[看这个client-go的架构图，DeltaFIFO是一个生产者-消费者队列，生产者是Reflector，消费者是Pop()方法。 一、Del]]></description>
</item><item>
    <title>client-go之工作队列</title>
    <link>https://blog.luxgreat.tk/2022/03/02-workqueue/</link>
    <pubDate>Mon, 07 Mar 2022 13:32:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2022/03/02-workqueue/</guid>
    <description><![CDATA[workqueue是client-go的工作队列，主要用于并行程序控制，比如各种资源controller监听informer对象的变化，当有]]></description>
</item><item>
    <title>client-go之索引</title>
    <link>https://blog.luxgreat.tk/2022/03/01-indexer/</link>
    <pubDate>Mon, 07 Mar 2022 13:32:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2022/03/01-indexer/</guid>
    <description><![CDATA[以下是client-go的官方架构图 先主要针对这个Indexer来分析。 一、Indexer Indexer保存来自api-server的资源，]]></description>
</item><item>
    <title>kubernetes简介</title>
    <link>https://blog.luxgreat.tk/2022/03/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link>
    <pubDate>Mon, 07 Mar 2022 13:32:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2022/03/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</guid>
    <description><![CDATA[kubernetes是Google开源的分布式容器管理平台，而我们已经知道了容器的本质就是由Linux Namespace、Cgroup和ro]]></description>
</item><item>
    <title>Linux六大Namespace</title>
    <link>https://blog.luxgreat.tk/2022/03/namespace/</link>
    <pubDate>Mon, 07 Mar 2022 13:28:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2022/03/namespace/</guid>
    <description><![CDATA[云计算领域最火的莫过于“容器”，而提到容器，就不得不提Docker，可以说Docker已经是容器的代名词。 容器其实是一种沙盒技术，顾名思义，]]></description>
</item><item>
    <title>进程后台运行</title>
    <link>https://blog.luxgreat.tk/2022/03/%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</link>
    <pubDate>Mon, 07 Mar 2022 13:28:41 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2022/03/%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</guid>
    <description><![CDATA[之前介绍过，Namespace、Cgroup和Union File System是Docker的基石，那么我们通常在执行docker容器的时候，有两种]]></description>
</item><item>
    <title>逃逸分析</title>
    <link>https://blog.luxgreat.tk/2022/03/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link>
    <pubDate>Mon, 07 Mar 2022 11:22:28 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2022/03/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid>
    <description><![CDATA[一个程序占用的内存分为以下几个部分： 栈区（stack）：由编译器自动分配，存放函数的参数，局部变量等 堆区（heap）：由程序员分配释放 全局静]]></description>
</item><item>
    <title>Struct的使用场景</title>
    <link>https://blog.luxgreat.tk/2022/03/struct/</link>
    <pubDate>Mon, 07 Mar 2022 11:21:14 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2022/03/struct/</guid>
    <description><![CDATA[golang里有个重要的类型就是结构体，虽然不能像C++一样有类的功能和特性，但也有自己独特的魅力。 这里着重介绍一下经常遇到的空结构体，我们]]></description>
</item></channel>
</rss>
