<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 风落云起</title>
    <link>https://betterfor.github.io/posts/</link>
    <description>Recent content in Posts on 风落云起</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 25 Feb 2021 15:15:36 +0800</lastBuildDate><atom:link href="https://betterfor.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang 1.16版本新特性 =&gt; 撤回版本(retract)</title>
      <link>https://betterfor.github.io/2021/02/golang_retract/</link>
      <pubDate>Thu, 25 Feb 2021 15:15:36 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/02/golang_retract/</guid>
      <description>一般来说，模块作者需要使用一种方法来只是不应该使用某个已发布的模块。
 出现一个严重的安全漏洞 不闲不兼容或bug 版本发布错误   出现过模块最新版本为1.0.0，错误发布1.1.0，然后在github上把版本删除，使用1.0.1版本，但是有人使用代理模块并且下载了1.1.0版本，所以其他人再下载指定latest会下载1.1.0版本的代码。
 准备工作  retract模块，github的完整路径是https://github.com/betterfor/retract，你可以使用自己的模块实验。 awesomeProjcet，本地模块，使用了test包的依赖的简单main函数。   请确保golang版本是1.16+
 创建test模块 1、先在github上创建好仓库
2、拉取代码仓库
1 2 3 4  $ git clone https://github.com/betterfor/retract.git $ cd retract/ $ go mod init go: creating new go.mod: module github.com/betterfor/retract   3、在模块中新建foo.go文件
1 2 3 4 5  package retract func Foo() string { return &amp;#34;v0.0.1&amp;#34; }   4、将retract模块的改动提交git并push
1 2 3  $ git add .</description>
    </item>
    
    <item>
      <title>Docker命令大全</title>
      <link>https://betterfor.github.io/2021/02/docker_command/</link>
      <pubDate>Fri, 12 Feb 2021 19:26:01 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/02/docker_command/</guid>
      <description>Docker是一个虚拟环境容器，可以将你的开发环境、代码、配置文件等一并打包到这个容器中，并发布和应用到任意平台中。所以你需要知道一点docker的命令。
 这里是关于docker的基础命令（第一节）
 版本信息：查看docker的各项基础信息 仓库管理：管理镜像存储的仓库  版本信息 info docker info：显示Docker系统信息，包括镜像、容器数量和镜像仓库。
语法
1 2 3 4  docker info [OPTIONS] Options: -f, --format string 显示返回值的模板文件   实例
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  Client: Context: default Debug Mode: false Plugins: app: Docker App (Docker Inc.</description>
    </item>
    
    <item>
      <title>Uuid</title>
      <link>https://betterfor.github.io/2021/02/uuid/</link>
      <pubDate>Mon, 08 Feb 2021 14:16:15 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/02/uuid/</guid>
      <description>背景 在复杂的分布式系统中，往往需要对大量的数据和消息进行唯一标识。数据日益增长，对数据库需要进行切分，而水平切分数据库需要一个唯一ID来标识一条数据或消息，数据库的自增ID显然不能满足需求。那么对于分布式全局ID有什么要求呢？
 全局唯一性：不能出现重复的ID号。 趋势递增：在MySQL InnoDB引擎中使用的是聚集索引，由于多数RDBMS使用B-tree的数据结构来存储索引数据，在主键的选择上面我们应该尽量使用有序的主键保证写入性能。 单调递增：保证下一个ID一定大于上一个ID，例如事务版本号、IM增量消息、排序等特殊需求。 信息安全：如果ID是连续的，会出现安全问题，在一些场景中，会需要ID无规则，不规则。  UUID UUID(Universally Unique Identifier)是一个128位标识符，在其规范的文本表示中，UUID 的 16 个 8 位字节表示为 32 个十六进制（基数16）数字，显示在由连字符分隔 &amp;lsquo;-&amp;rsquo; 的五个组中，&amp;ldquo;8-4-4-4-12&amp;rdquo; 总共 36 个字符（32 个字母数字字符和 4 个连字符）。例如：123e4567-e89b-12d3-a456-426655440000。
  优点：性能高，本地生成，没有网络消耗
  缺点：
1、不易存储：UUID太长，很多场景不适用。
2、信息不安全：基于MAC地址生成的UUID算法可能造成MAC地址泄露。
3、没有排序，无法保证递增趋势。
4、不易读，存储空间大。
go两种生成UUID的第三方包：
github.com/google/uuid
github.com/satori/go.uuid
  Snowflake snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。
1、实现原理：
1位最高位：符号位不使用，0表示正数，1表示负数。
41位时间戳：1&amp;lt;&amp;lt;41 = 1000*3600*24*365 = 69 年。
10位工作机器id：如果我们对IDC划分有需求可以用5位给IDC，5位给工作机器，这样就可以表示32个IDC，每个IDC下有32台机器。
12位自增ID：可以表示2^12^个ID。
理论上snowflake方案的QPS约为409.3w/s，这种分配方式可以保证在任何一个IDC的任何一台机器在任意毫秒内生成的ID都是不同的。
优点：
 毫秒数在高位，自增序列在低位，整个ID都是趋势递增的。 不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的。 可以根据自身业务特性分配bit位，非常灵活。  缺点：
 强依赖机器时钟，如果机器上时钟回拨，会导致发号重复或者服务会处于不可用状态。  代码实现：</description>
    </item>
    
    <item>
      <title>二维数组按行和按列遍历的效率</title>
      <link>https://betterfor.github.io/2021/02/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E6%95%88%E7%8E%87/</link>
      <pubDate>Mon, 08 Feb 2021 10:14:18 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/02/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%E6%95%88%E7%8E%87/</guid>
      <description>二维数组的排列顺序 数组在内存中是按行存储的，按行遍历时可以由指向数组的第一个数的指针一直向后遍历，由于二维数组的内存地址是连续的，当前行的尾和下一行的头相邻。
用代码来打印数组的地址。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  func main() { var a int32 fmt.Println(unsafe.Sizeof(a)) n := 4 array := generateArray(n) for i := 0; i &amp;lt; n; i++ { fmt.Printf(&amp;#34;%p \n&amp;#34;,array[i]) } } func generateArray(n int) [][]int32 { var arr = make([][]int32,n) for i := 0; i &amp;lt; n; i++ { arr[i] = make([]int32,n) for j := 0; j &amp;lt; n; j++ { arr[i][j] = 1 } } return arr } // Output: 4 0xc0000a0090 0xc0000a00a0 0xc0000a00b0 0xc0000a00c0    int32占用4个字节，4个int32占用16个字节，这与我们得到一个数组的地址是对应的。</description>
    </item>
    
    <item>
      <title>基础排序算法</title>
      <link>https://betterfor.github.io/2021/02/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 07 Feb 2021 13:43:54 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/02/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</guid>
      <description>排序算法 所谓的排序算法就是将一串记录，按照递增或递减的顺序排列起来。
 通常提到的一共有十种排序：冒泡、选择、插入、快速、归并、堆、希尔、计数、桶、基数
   比较类排序：通过比较来决定元素间的相对次序，通常其时间复杂度不能突破O(nlogn)，因此又称为非线性时间比较类排序。
  非比较类排序：不通过比较元素间的相对次序，可以突破基于比较排序的时间下限，以线性时间运行，因此又称为线性时间非比较类排序。
  时间复杂度：
   排序方法 时间复杂度(平均) 时间复杂度(最坏) 时间复杂度(最好) 空间复杂度 稳定性     冒泡排序 O(n^2^) O(n^2^) O(n) O(1) 稳定   选择排序 O(n^2^) O(n^2^) O(n^2^) O(1) 不稳定   插入排序 O(n^2^) O(n^2^) O(n) O(1) 稳定   快速排序 O(nlogn) O(n^2^) O(nlogn) O(nlogn) 不稳定   归并排序 O(nlogn) O(nlogn) O(nlogn) O(n) 稳定   堆排序 O(nlogn) O(nlogn) O(nlogn) O(1) 不稳定   希尔排序 O(n^1.</description>
    </item>
    
    <item>
      <title>使用Navicate连接Oracle失败 ORA-25847:connection to server failed,probable Orable Net admin error</title>
      <link>https://betterfor.github.io/2021/01/oracle_connect/</link>
      <pubDate>Mon, 18 Jan 2021 14:04:32 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/01/oracle_connect/</guid>
      <description>使用Navicate 15连接Oracle数据库出现如下错误
通过查询可知是oci.dll版本太低，使用的11.2版本。因为Navicate是通过Oracle客户端连接Oracle服务器，Oracle的客户端分为两种，一种是标准版，一种是简洁版，即Oracle Install Client。出现ORA-28547错误时，多数是因为Navicat本地的OCI版本与Oracle服务器服务器不符造成的。
OCI下载地址
这里看到许多文章提示不管使用的32位系统还是64位系统都应下载32为的Install Client
这里我实际操作了一下，64位的系统并不支持32位，所以一定要根据自己的系统版本下载。
打开Navicate程序，打开 “工具” -&amp;gt; &amp;ldquo;选项&amp;rdquo; -&amp;gt; &amp;ldquo;环境&amp;rdquo; -&amp;gt; &amp;ldquo;OCI环境&amp;rdquo;
将刚才下载的oci.dll文件完整目录填上，确定后重启Navicate，就会发现可以成功连接了。</description>
    </item>
    
    <item>
      <title>并查集</title>
      <link>https://betterfor.github.io/2021/01/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
      <pubDate>Mon, 11 Jan 2021 15:17:18 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/01/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
      <description>并查集 目的: 解决元素分组问题
用途: 1、判断有向图中是否产生环 2、维护无向图的连通性，判断两个点是否在同一个连通块中
操作: 1、初始化: 每个集合的parent都是自己 2、查询: 查询集合的parent 3、合并: 把不相连的元素合并到同一个集合中
方法 1、初始化 假如有编号为1, 2, 3, &amp;hellip;, n的n个元素，我们用一个数组fa[]来存储每个元素的父节点（因为每个元素有且只有一个父节点，所以这是可行的）。 一开始，我们先将它们的父节点设为自己。
1 2 3 4  var fa = make([]int,n) for i := 0; i &amp;lt; n; i++ { fa[i] = i }   2、查询 我们用递归的写法实现对代表元素的查询：一层一层访问父节点，直至根节点（根节点的标志就是父节点是本身）。 要判断两个元素是否属于同一个集合，只需要看它们的根节点是否相同即可。
1 2 3 4 5 6  find = func(x int) int { if x == fa[x] { return x } return find(fa[x]) }   路径压缩方法</description>
    </item>
    
    <item>
      <title>docker安装部署Rocketmq</title>
      <link>https://betterfor.github.io/2021/01/rocketmq/</link>
      <pubDate>Thu, 07 Jan 2021 16:50:55 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/01/rocketmq/</guid>
      <description>RocketMQ 消息队列作为高并发系统的组件之一，能够帮助业务系统解构提高开发效率和系统稳定性。
优势：
 削峰填谷：解决瞬时写压力导致的消息丢失、系统崩溃等问题 系统解耦：处理不同重要程度和不同能力级别系统之间的消息 提升性能：当存在一对多调用是，可以发一条消息给消息系统，让消息系统通知相关系统 蓄流压测：可以堆积一定的消息量来压测  安装RocketMQ 官方地址
1 2 3 4 5 6 7 8  # git clone https://github.com/apache/rocketmq-docker.git # cd rocketmq-docker/ # ls CONTRIBUTING.md image-build LICENSE NOTICE product README.md stage.sh templates # cd image-build/ # ls build-image.sh Dockerfile-alpine Dockerfile-centos scripts update.sh   创建RocketMQ镜像 sh build-image.sh RMQ-VERSION BASE-IMAGE
RMQ-VERSION
BASE-IMAGE支持centos，alpine两种方式
我们使用
sh build-image.sh 4.7.1 alpine
构建时间有点长，需要耐心等待。
当构建完成之后会提示
1 2  Successfully built 128108c2e50d Successfully tagged apacherocketmq/rocketmq:4.</description>
    </item>
    
    <item>
      <title>6道有趣的智力题</title>
      <link>https://betterfor.github.io/2020/12/%E6%99%BA%E5%8A%9B%E9%A2%98/</link>
      <pubDate>Tue, 15 Dec 2020 20:28:08 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/12/%E6%99%BA%E5%8A%9B%E9%A2%98/</guid>
      <description>一 有20瓶药丸，其中19瓶装有1克/粒的药丸，余下一瓶装有1.1克/粒的药丸。给你一台称重精准的天平，怎么找出较重的那瓶药丸？天平只能使用一次。 初次看到这题，如果不限制次数，那么可以二分法，天平两边10个比较，直到找到较重的为止。
但是，现在限制只能使用一次天平。
怎么办呢？
假设只有两瓶药丸，一瓶较重，从两瓶中各取一粒，称重为2.1克，我们无法得知是从哪一瓶多出的0.1克。
我们需要将因子不平衡，如果从1号药瓶取出1粒，从2号药瓶取出2粒，如果算出重量是3.1克，那么1号瓶较重，如果算出重量为3.2克，那么2号瓶较重。
我们将这个结论推广一下，从1号药瓶取出1粒，从2号药瓶取出2粒，以此类推，如果每粒药丸均重1克，那么得到总重量为（1+2+3+&amp;hellip;+20=21*20/2=210）, 因此，如果称重为210.9克，那么较重的那瓶来自于9号瓶。
二 有个8*8的棋盘，其中对角的角落有两个方块被切掉了。给定31块多米诺骨牌，一块骨牌恰好可以覆盖两个格子。用31块骨牌能否盖住整个棋盘呢？ 乍一看，棋盘88=64，多米诺312=62，刚好能盖住。。其实是错觉
假设棋盘有32个黑格和32个白格交叉排列，切掉对角的方格是同种颜色的，此时只剩30个黑格和32个白格（或32个黑格和30个白格）， 而一块多米诺骨牌必须要覆盖一个白格和一个黑格，31块多米诺骨牌要覆盖31个白格和31个黑格。
三 有两个水壶，容量为5升和3升，若水量不限量，怎么用这两个水壶得到4升的水？注：水壶不规则形状，无法精确装满半壶水。     5升 3升 注释     5 0 装满5升的壶   2 3 用5升的壶装满3升的壶   0 2 将5升壶中的2升水倒入3升壶中   5 2 装满5升壶   4 3 用5升壶装满3升壶       5升 3升 注释     0 3 装满3升壶   3 3 将3升壶倒入5升壶中，同时装满3升壶   5 1 将3升壶倒入5升壶中   1 0 将3升壶中的1升水倒入5升壶中   1 3 装满3升壶   4 0 将3升壶倒入5升壶中    四 在岛上住着一群人，有一天来了一个游客，定了奇怪的规矩：所有的蓝眼睛必须尽快离开岛。 每个人都能看到别人眼睛的颜色，但不知道自己眼睛的颜色（别人不能告知）， 此外他们不知道有多少个蓝眼睛，只知道至少有一个蓝眼睛，每个人都是聪明的，那么蓝眼睛要花几天才能离开这个岛呢？ 假设有c个蓝眼睛，且c&amp;gt;0 1、c=1：只有一个蓝眼睛 蓝眼睛的人观察之后发现没有蓝眼睛，那么一定能推导出自己是蓝眼睛，因此他会当天离开</description>
    </item>
    
    <item>
      <title>常见的数据结构--chan</title>
      <link>https://betterfor.github.io/2020/12/chan/</link>
      <pubDate>Wed, 09 Dec 2020 10:25:54 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/12/chan/</guid>
      <description>介绍一下Golang channel的内部实现，包括channel的数据结构及相关操作的代码实现。
数据结构 1 2 3 4 5 6 7 8 9 10 11 12 13  type hchan struct { qcount uint // 队列中数据的个数 	dataqsiz uint // 队列大小 	buf unsafe.Pointer // 存放数据的环形数组 	elemsize uint16 // channel中数据类型的大小 	closed uint32 // channel是否关闭 	elemtype *_type // 元素数据类型 	sendx uint // send的数组索引 	recvx uint // receive的数组索引 	recvq waitq // &amp;lt;-ch 阻塞在channel上的队列 	sendq waitq // ch&amp;lt;- 阻塞在channel上的队列 	lock mutex }   新建 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  func makechan(t *chantype, size int) *hchan { elem := t.</description>
    </item>
    
    <item>
      <title>常见的数据结构--map</title>
      <link>https://betterfor.github.io/2020/12/map/</link>
      <pubDate>Mon, 07 Dec 2020 11:09:14 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/12/map/</guid>
      <description>很多的业务场景都会用到map，在其他语言可能成为set/集合等，主要就是key:value格式。
1 2 3 4 5 6 7 8 9 10 11 12 13  // A map is just a hash table. The data is arranged // into an array of buckets. Each bucket contains up to // 8 key/elem pairs. The low-order bits of the hash are // used to select a bucket. Each bucket contains a few // high-order bits of each hash to distinguish the entries // within a single bucket.</description>
    </item>
    
    <item>
      <title>常见的数据结构--切片</title>
      <link>https://betterfor.github.io/2020/12/slice/</link>
      <pubDate>Mon, 07 Dec 2020 09:18:56 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/12/slice/</guid>
      <description>在使用过程中，我们经常会用到数组这一数据结构，而在golang中，提供了数组和切片两种，数组是固定长度的且长度为定值，而切片是可以扩张的数组。
本章内容参考 runtime/slice.go
内部数据结构 1 2 3 4 5  type slice struct { array unsafe.Pointer// 数据  len int // 长度  cap int // 容量 }   我们可以通过下面的代码输出slice：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  package main import ( &amp;#34;fmt&amp;#34; &amp;#34;unsafe&amp;#34; ) func main() { data := make([]int,0,3) fmt.</description>
    </item>
    
    <item>
      <title>常见的数据结构--链表</title>
      <link>https://betterfor.github.io/2020/12/list/</link>
      <pubDate>Sun, 06 Dec 2020 15:19:21 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/12/list/</guid>
      <description>提到数据结构，第一个就是链表。通过一组任意的存储单元来存储线性表中的数据元素。
链表 链表：线性表的链式存储
最简单的链表如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  package main import &amp;#34;fmt&amp;#34; type LinkNode struct { data int next *LinkNode } func main() { // 第一个节点 	node1 := new(LinkNode) node1.data = 1 // 第二个节点 	node2 := new(LinkNode) node2.</description>
    </item>
    
    <item>
      <title>golang源码剖析 准备</title>
      <link>https://betterfor.github.io/2020/11/prestudy/</link>
      <pubDate>Wed, 25 Nov 2020 15:25:38 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/11/prestudy/</guid>
      <description>语言版本 golang 1.15.5
初学golang 1、go语言之旅
2、搭建开发环境
3、有人喜欢看文档，有人喜欢看视频，各凭喜好，找到自己适合的方式了解语法
4、看一本教程书
5、熟悉与了解标准库
6、实际操作一个项目
这些方法步骤学习资料在其他地方已经有很多了，这里就不赘述了。
参考资料 官方标准库
官方标准库中文版
Go语言标准库 (不全)
gopkg (部分)</description>
    </item>
    
    <item>
      <title>golang源码解析目录</title>
      <link>https://betterfor.github.io/2020/11/catelog/</link>
      <pubDate>Wed, 25 Nov 2020 15:01:18 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/11/catelog/</guid>
      <description>学习完golang，上手过几个项目，了解过框架，工具等，怎么提高自己？
我打算从头开始，了解源码的实现
// todo updated
前言
[]</description>
    </item>
    
    <item>
      <title>如何自定义让json解析出自定义值</title>
      <link>https://betterfor.github.io/2020/11/json_example/</link>
      <pubDate>Wed, 25 Nov 2020 09:54:07 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/11/json_example/</guid>
      <description>简介 先来看一下 json.Unmarshal 的注释
大意是 json 解析的时候会调用 Unmarshaler 的接口。那么我们就可以自定义解析数据了。
先看一个例子
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) const textJson = `{&amp;#34;name&amp;#34;:&amp;#34;xiaoming&amp;#34;,&amp;#34;duration&amp;#34;:&amp;#34;5s&amp;#34;}` func main() { var o Object json.Unmarshal([]byte(textJson),&amp;amp;o) fmt.Printf(&amp;#34;%+v\n&amp;#34;,o) } type Object struct { Name string Time time.</description>
    </item>
    
    <item>
      <title>Golang exporter的使用方法</title>
      <link>https://betterfor.github.io/2020/11/exporter/</link>
      <pubDate>Fri, 20 Nov 2020 15:45:29 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/11/exporter/</guid>
      <description>前言 在开始监控你的服务之前，你需要通过添加prometheus客户端来添加监控。 可以找 第三方exporter 监控你的服务，也可以自己编写exporter。
目前已经有很多不同的语言编写的客户端库，包括官方提供的Go，Java，Python，Ruby。 已有客户端库
在了解编写exporter之前，可以先5分钟学会搭建prometheus
简单的exporter服务 先写一个简单的http服务，在9095端口启动了一个能够为prometheus提供监控指标的HTTP服务。你可以在 http://localhost:9095/metrics 看到这些指标。
1 2 3 4 5 6 7 8 9 10 11 12 13 14  package main import ( &amp;#34;github.com/prometheus/client_golang/prometheus/promhttp&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.HandleFunc(&amp;#34;/&amp;#34;, func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(&amp;#34;hello world&amp;#34;)) }) http.Handle(&amp;#34;/metrics&amp;#34;,promhttp.Handler()) http.ListenAndServe(&amp;#34;:9095&amp;#34;,nil) }   虽然偶尔会手动访问/metrics页面查看指标数据，但是将指标数据导入prometheus才方便。
1 2 3 4 5 6 7 8 9 10  global:scrape_interval:15s# 默认抓取间隔，15s向目标抓取一次数据external_labels:monitor:&amp;#39;prometheus-monitor&amp;#39;# 抓取对象scrape_configs:- job_name:&amp;#39;exporter&amp;#39;# 名称，会在每一条metrics添加标签{job_name:&amp;#34;prometheus&amp;#34;}scrape_interval:5s# 抓取时间static_configs:# 抓取对象- targets:[&amp;#39;localhost:9095&amp;#39;]  那么在 http://localhost:9090/ 浏览器输入 PromQL 表达式 go_info,就会看到如图的结果 监控指标 Counter(计数器类型) Counter记录的是事件的数量或大小，只增不减，除非发生重置。</description>
    </item>
    
    <item>
      <title>5分钟学会搭建Prometheus</title>
      <link>https://betterfor.github.io/2020/11/prometheus/</link>
      <pubDate>Thu, 19 Nov 2020 18:03:03 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/11/prometheus/</guid>
      <description>简介 prometheus是一个开源的系统监控和警报工具包，最初由SoundCloud开发。自2012年始，许多公司和组织已经采用了prometheus，该项目拥有活跃的开发人员和用户社区。 它现在是一个独立的开源项目，独立于任何公司进行维护。着重于此，prometheus在2016年加入CNCF，是继kubernetes之后第二个托管的项目。
官网地址： Prometheus
github地址： github
架构图
下载与安装 安装方式有很多种，如果你是windows用户，那么只需要在本地起个二进制服务就可以。如果你是linux用户，可以通过docker等更加灵活方式部署。
二进制 二进制下载地址
1 2 3  tar xvfz prometheus-*.tar.gz cd prometheus-* ./prometheus --config.file=prometheus.yml   当然你可以下载最新的源码进行编译获取最新的二进制文件。
1 2 3 4 5 6  mkdir -p $GOPATH/src/github.com/prometheus cd $GOPATH/src/github.com/prometheus git clone https://github.com/prometheus/prometheus.git cd prometheus make build ./prometheus -config.file=your_config.yml   docker 1 2  # 使用 /opt/prometheus/prometheus.yml 的配置 docker run --name prometheus -d -p 127.0.0.1:9090:9090 -v /opt/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus   helm 1 2 3 4 5 6 7 8 9 10  helm repo add prometheus-community https://prometheus-community.</description>
    </item>
    
  </channel>
</rss>
