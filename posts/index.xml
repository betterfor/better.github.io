<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - 月霜天的小站</title>
        <link>https://betterfor.github.io/posts/</link>
        <description>所有文章 | 月霜天的小站</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 28 Jun 2021 14:07:33 &#43;0800</lastBuildDate><atom:link href="https://betterfor.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>高并发系统下的限速策略</title>
    <link>https://betterfor.github.io/2021/06/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E9%99%90%E9%80%9F%E7%AD%96%E7%95%A5/</link>
    <pubDate>Mon, 28 Jun 2021 14:07:33 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/06/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E9%99%90%E9%80%9F%E7%AD%96%E7%95%A5/</guid>
    <description><![CDATA[限流又称为流量控制，是限制到达系统的并发请求数，当达到限制条件时可以拒绝请求，可以起到保护下游服务，熔断流量的作用。常用的限流策略有漏桶算法]]></description>
</item><item>
    <title>Golang定时器1.13源码分析</title>
    <link>https://betterfor.github.io/2021/06/golang%E5%AE%9A%E6%97%B6%E5%99%A81.13/</link>
    <pubDate>Wed, 09 Jun 2021 14:42:10 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/06/golang%E5%AE%9A%E6%97%B6%E5%99%A81.13/</guid>
    <description><![CDATA[本文将基于Golang源码对Timer的底层实现进行深度剖析。 注：本文基于golang-1.13源码进行分析。 概述 我们在开发过程中通常会用到]]></description>
</item><item>
    <title>并发编程之原子操作</title>
    <link>https://betterfor.github.io/2021/06/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</link>
    <pubDate>Thu, 03 Jun 2021 09:59:51 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/06/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</guid>
    <description><![CDATA[原子操作 我们先给原子操作下一个定义： 原子(atom)：在化学反应中不可再分的基本微粒。 原子操作(atomic operation)：不会被线程]]></description>
</item><item>
    <title>Pod升级与回滚</title>
    <link>https://betterfor.github.io/2021/03/pod%E5%8D%87%E7%BA%A7%E4%B8%8E%E5%9B%9E%E6%BB%9A/</link>
    <pubDate>Wed, 24 Mar 2021 22:51:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/03/pod%E5%8D%87%E7%BA%A7%E4%B8%8E%E5%9B%9E%E6%BB%9A/</guid>
    <description><![CDATA[一、简介 当集群中的某个服务需要升级时，我们需要停止目前与该服务的相关的所有pod，然后下载新版本镜像并创建新的pod。如果集群规模比较大，则]]></description>
</item><item>
    <title>Pod调度</title>
    <link>https://betterfor.github.io/2021/03/pod%E8%B0%83%E5%BA%A6/</link>
    <pubDate>Tue, 23 Mar 2021 22:32:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/03/pod%E8%B0%83%E5%BA%A6/</guid>
    <description><![CDATA[一、简介 在大多数情况下，我们不关心pod会被调度到哪个节点，只关心pod是否被成功调度到集群的一个可用节点。但是，在真实生产环境中存在一种需]]></description>
</item><item>
    <title>Pod的基础</title>
    <link>https://betterfor.github.io/2021/03/pod%E5%9F%BA%E7%A1%80/</link>
    <pubDate>Mon, 22 Mar 2021 21:55:59 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/03/pod%E5%9F%BA%E7%A1%80/</guid>
    <description><![CDATA[一、简介 pod在整个生命周期中被系统定义为各种状态，熟悉pod的各种状态对于理解如何设置pod的调度策略、重启策略都是很有必要的。 二、pod]]></description>
</item><item>
    <title>Mutex的源码解析</title>
    <link>https://betterfor.github.io/2021/02/mutex/</link>
    <pubDate>Fri, 26 Feb 2021 14:46:05 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/02/mutex/</guid>
    <description><![CDATA[我们来看一下sync包下有哪些常见的使用：cond.go map.go mutex.go once.go pool.go rwmutex.go waitgroup.go 什么是sync？ Package sync provides basic synchronization primitives such as mutual exclusion locks. Other than the Once and WaitGroup types, most are intended for use by low-level library routines. Higher-level]]></description>
</item><item>
    <title>Golang 1.16版本新特性 =&gt; 撤回版本(retract)</title>
    <link>https://betterfor.github.io/2021/02/golang_retract/</link>
    <pubDate>Thu, 25 Feb 2021 15:15:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/02/golang_retract/</guid>
    <description><![CDATA[一般来说，模块作者需要使用一种方法来只是不应该使用某个已发布的模块。 出现一个严重的安全漏洞 不闲不兼容或bug 版本发布错误 出现过模块最新版本为]]></description>
</item><item>
    <title>Docker命令大全</title>
    <link>https://betterfor.github.io/2021/02/docker_command/</link>
    <pubDate>Fri, 12 Feb 2021 19:26:01 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/02/docker_command/</guid>
    <description><![CDATA[Docker是一个虚拟环境容器，可以将你的开发环境、代码、配置文件等一并打包到这个容器中，并发布和应用到任意平台中。所以你需要知道一点doc]]></description>
</item><item>
    <title>Defer的使用方法</title>
    <link>https://betterfor.github.io/2021/02/defer/</link>
    <pubDate>Thu, 11 Feb 2021 10:31:33 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://betterfor.github.io/2021/02/defer/</guid>
    <description><![CDATA[什么是defer？ defer是go语言提供的一种用于注册延迟调用的机制，让函数或语句可以在当前函数执行完毕后（包括通过return正常结束或]]></description>
</item></channel>
</rss>
