<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>golang - 标签 - 月霜天的小站</title>
        <link>https://blog.luxgreat.tk/tags/golang/</link>
        <description>golang - 标签 - 月霜天的小站</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 07 Mar 2022 11:14:26 &#43;0800</lastBuildDate><atom:link href="https://blog.luxgreat.tk/tags/golang/" rel="self" type="application/rss+xml" /><item>
    <title>CSP并发模型</title>
    <link>https://blog.luxgreat.tk/2022/03/csp%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/</link>
    <pubDate>Mon, 07 Mar 2022 11:14:26 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2022/03/csp%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/</guid>
    <description><![CDATA[一、goroutine 进程：可并发执行的程序在某个数据集合上的一次计算活动，也是操作系统进行资源分配和调度的基本单位。每个进程都有自己的独立]]></description>
</item><item>
    <title>停止goroutine的几种方法</title>
    <link>https://blog.luxgreat.tk/2021/07/%E5%81%9C%E6%AD%A2goroutine%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
    <pubDate>Tue, 27 Jul 2021 09:35:42 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2021/07/%E5%81%9C%E6%AD%A2goroutine%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[在日常工作中，我们经常会用关键字go起一个goroutine。 但是在跑一段时间后，可能会遇到一些问题：当goroutine内的任务运行的太久]]></description>
</item><item>
    <title>no copy机制</title>
    <link>https://blog.luxgreat.tk/2021/07/nocopy%E6%9C%BA%E5%88%B6/</link>
    <pubDate>Mon, 19 Jul 2021 14:44:23 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2021/07/nocopy%E6%9C%BA%E5%88%B6/</guid>
    <description><![CDATA[在sync包下面经常出现&quot;XXX must not be copied after first use.&quot;，然后下面就有一个noCopy。 什么是noCopy ? 如果结构体对象]]></description>
</item><item>
    <title>高并发系统下的限速策略</title>
    <link>https://blog.luxgreat.tk/2021/06/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E9%99%90%E9%80%9F%E7%AD%96%E7%95%A5/</link>
    <pubDate>Mon, 28 Jun 2021 14:07:33 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2021/06/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E9%99%90%E9%80%9F%E7%AD%96%E7%95%A5/</guid>
    <description><![CDATA[限流又称为流量控制，是限制到达系统的并发请求数，当达到限制条件时可以拒绝请求，可以起到保护下游服务，熔断流量的作用。常用的限流策略有漏桶算法]]></description>
</item><item>
    <title>Golang 1.16版本新特性 =&gt; 撤回版本(retract)</title>
    <link>https://blog.luxgreat.tk/2021/02/golang_retract/</link>
    <pubDate>Thu, 25 Feb 2021 15:15:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2021/02/golang_retract/</guid>
    <description><![CDATA[一般来说，模块作者需要使用一种方法来只是不应该使用某个已发布的模块。 出现一个严重的安全漏洞 不闲不兼容或bug 版本发布错误 出现过模块最新版本为]]></description>
</item><item>
    <title>Defer的使用方法</title>
    <link>https://blog.luxgreat.tk/2021/02/defer/</link>
    <pubDate>Thu, 11 Feb 2021 10:31:33 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2021/02/defer/</guid>
    <description><![CDATA[什么是defer？ defer是go语言提供的一种用于注册延迟调用的机制，让函数或语句可以在当前函数执行完毕后（包括通过return正常结束或]]></description>
</item><item>
    <title>Iota的使用方法</title>
    <link>https://blog.luxgreat.tk/2021/02/itoa/</link>
    <pubDate>Wed, 10 Feb 2021 20:14:57 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2021/02/itoa/</guid>
    <description><![CDATA[iota是golang语言的常数计量器，只能在常量的表达式中使用。 iota在const关键字出现时被重置为0(const内部的第一行之前)。]]></description>
</item><item>
    <title>十大基础排序算法</title>
    <link>https://blog.luxgreat.tk/2021/02/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</link>
    <pubDate>Sun, 07 Feb 2021 13:43:54 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2021/02/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</guid>
    <description><![CDATA[排序算法 所谓的排序算法就是将一串记录，按照递增或递减的顺序排列起来。 通常提到的一共有十种排序：冒泡、选择、插入、快速、归并、堆、希尔、计数、]]></description>
</item><item>
    <title>并查集</title>
    <link>https://blog.luxgreat.tk/2021/01/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
    <pubDate>Mon, 11 Jan 2021 15:17:18 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2021/01/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
    <description><![CDATA[并查集 目的: 解决元素分组问题 用途: 1、判断有向图中是否产生环 2、维护无向图的连通性，判断两个点是否在同一个连通块中 操作: 1、初始化: 每个集合]]></description>
</item><item>
    <title>如何自定义让json解析出自定义值</title>
    <link>https://blog.luxgreat.tk/2020/11/json_unmarshal/</link>
    <pubDate>Wed, 25 Nov 2020 09:54:07 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.luxgreat.tk/2020/11/json_unmarshal/</guid>
    <description><![CDATA[简介 先来看一下 json.Unmarshal 的注释 大意是 json 解析的时候会调用 Unmarshaler 的接口。那么我们就可以自定义解析数据了。 先看一个例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20]]></description>
</item></channel>
</rss>
