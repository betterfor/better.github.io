<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>golang - 标签 - 月霜天的小站</title>
        <link>https://blog.betterformile.ml/tags/golang/</link>
        <description>golang - 标签 - 月霜天的小站</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 28 Jun 2021 14:07:33 &#43;0800</lastBuildDate><atom:link href="https://blog.betterformile.ml/tags/golang/" rel="self" type="application/rss+xml" /><item>
    <title>高并发系统下的限速策略</title>
    <link>https://blog.betterformile.ml/2021/06/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E9%99%90%E9%80%9F%E7%AD%96%E7%95%A5/</link>
    <pubDate>Mon, 28 Jun 2021 14:07:33 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.betterformile.ml/2021/06/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E9%99%90%E9%80%9F%E7%AD%96%E7%95%A5/</guid>
    <description><![CDATA[限流又称为流量控制，是限制到达系统的并发请求数，当达到限制条件时可以拒绝请求，可以起到保护下游服务，熔断流量的作用。常用的限流策略有漏桶算法]]></description>
</item><item>
    <title>并发编程之原子操作</title>
    <link>https://blog.betterformile.ml/2021/06/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</link>
    <pubDate>Thu, 03 Jun 2021 09:59:51 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.betterformile.ml/2021/06/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</guid>
    <description><![CDATA[原子操作 我们先给原子操作下一个定义： 原子(atom)：在化学反应中不可再分的基本微粒。 原子操作(atomic operation)：不会被线程]]></description>
</item><item>
    <title>Mutex的源码解析</title>
    <link>https://blog.betterformile.ml/2021/02/mutex/</link>
    <pubDate>Fri, 26 Feb 2021 14:46:05 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.betterformile.ml/2021/02/mutex/</guid>
    <description><![CDATA[我们来看一下sync包下有哪些常见的使用：cond.go map.go mutex.go once.go pool.go rwmutex.go waitgroup.go 什么是sync？ Package sync provides basic synchronization primitives such as mutual exclusion locks. Other than the Once and WaitGroup types, most are intended for use by low-level library routines. Higher-level]]></description>
</item><item>
    <title>Golang 1.16版本新特性 =&gt; 撤回版本(retract)</title>
    <link>https://blog.betterformile.ml/2021/02/golang_retract/</link>
    <pubDate>Thu, 25 Feb 2021 15:15:36 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.betterformile.ml/2021/02/golang_retract/</guid>
    <description><![CDATA[一般来说，模块作者需要使用一种方法来只是不应该使用某个已发布的模块。 出现一个严重的安全漏洞 不闲不兼容或bug 版本发布错误 出现过模块最新版本为]]></description>
</item><item>
    <title>Defer的使用方法</title>
    <link>https://blog.betterformile.ml/2021/02/defer/</link>
    <pubDate>Thu, 11 Feb 2021 10:31:33 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.betterformile.ml/2021/02/defer/</guid>
    <description><![CDATA[什么是defer？ defer是go语言提供的一种用于注册延迟调用的机制，让函数或语句可以在当前函数执行完毕后（包括通过return正常结束或]]></description>
</item><item>
    <title>十大基础排序算法</title>
    <link>https://blog.betterformile.ml/2021/02/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</link>
    <pubDate>Sun, 07 Feb 2021 13:43:54 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.betterformile.ml/2021/02/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</guid>
    <description><![CDATA[排序算法 所谓的排序算法就是将一串记录，按照递增或递减的顺序排列起来。 通常提到的一共有十种排序：冒泡、选择、插入、快速、归并、堆、希尔、计数、]]></description>
</item><item>
    <title>并查集</title>
    <link>https://blog.betterformile.ml/2021/01/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
    <pubDate>Mon, 11 Jan 2021 15:17:18 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.betterformile.ml/2021/01/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
    <description><![CDATA[并查集 目的: 解决元素分组问题 用途: 1、判断有向图中是否产生环 2、维护无向图的连通性，判断两个点是否在同一个连通块中 操作: 1、初始化: 每个集合]]></description>
</item><item>
    <title>常见的数据结构--chan</title>
    <link>https://blog.betterformile.ml/2020/12/chan/</link>
    <pubDate>Wed, 09 Dec 2020 10:25:54 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.betterformile.ml/2020/12/chan/</guid>
    <description><![CDATA[介绍一下Golang channel的内部实现，包括channel的数据结构及相关操作的代码实现。 数据结构 1 2 3 4 5 6 7 8 9 10 11 12 13 type hchan struct { qcount]]></description>
</item><item>
    <title>常见的数据结构--map</title>
    <link>https://blog.betterformile.ml/2020/12/map/</link>
    <pubDate>Mon, 07 Dec 2020 11:09:14 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.betterformile.ml/2020/12/map/</guid>
    <description><![CDATA[很多的业务场景都会用到map，在其他语言可能成为set/集合等，主要就是key:value格式。 1 2 3 4 5 6 7 8 9 10 11 12 13 // A map is just a hash table. The]]></description>
</item><item>
    <title>常见的数据结构--切片</title>
    <link>https://blog.betterformile.ml/2020/12/slice/</link>
    <pubDate>Mon, 07 Dec 2020 09:18:56 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://blog.betterformile.ml/2020/12/slice/</guid>
    <description><![CDATA[在使用过程中，我们经常会用到数组这一数据结构，而在golang中，提供了数组和切片两种，数组是固定长度的且长度为定值，而切片是可以扩张的数组]]></description>
</item></channel>
</rss>
