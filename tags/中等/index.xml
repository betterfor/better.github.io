<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中等 on 风落云起</title>
    <link>https://betterfor.github.io/tags/%E4%B8%AD%E7%AD%89/</link>
    <description>Recent content in 中等 on 风落云起</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 06 Feb 2021 21:20:19 +0800</lastBuildDate><atom:link href="https://betterfor.github.io/tags/%E4%B8%AD%E7%AD%89/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LEETCODE 005. 最长回文串</title>
      <link>https://betterfor.github.io/2021/02/005/</link>
      <pubDate>Sat, 06 Feb 2021 21:20:19 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/02/005/</guid>
      <description>力扣百题系列
 大家好，我是小耗。
今天给大家带来的是经典题之回文串。
什么是回文串？正着读和反着读都是一样的字符串就是回文串，例如level。
题目 给一个字符串s，找出s中最长的回文子串。
题解 1、暴力法
判断一个字符串是否是回文串，然后再找出所有的回文子串。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  func longestPalindrome(s string) string { var maxLen int var maxStr string for i := 0; i &amp;lt; len(s); i++ { for j := i + 1; j &amp;lt; len(s)+1; j++ { len := isPalindrome(s[i:j]) if len &amp;gt; maxLen { maxStr = s[i:j] maxLen = len } } } return maxStr } func isPalindrome(s string) int { var newStr string for i := len(s)-1; i &amp;gt;= 0; i--{ newStr += s[i:i+1] } if s == newStr { return len(s) } return 0 }   时间复杂度O(n^3^)，空间复杂度O(1)。</description>
    </item>
    
    <item>
      <title>LEETCODE 1423. 可获得的最大点数</title>
      <link>https://betterfor.github.io/2021/02/1423/</link>
      <pubDate>Sat, 06 Feb 2021 20:52:42 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/02/1423/</guid>
      <description>大家好，我是沉迷于刷题的小耗。
今天给大家带来的是力扣1423题：可获得的最大点数
题目 几张卡牌排成一行，每张卡牌都有一个点数。点数由整数数组cardPoints给出。
每次行动，你可以从行的开头或结尾拿一张卡牌，最终你必须正好拿k张卡牌。
你的点数就是你拿到手中所有卡牌点数之和。
给你一个整数数组cardPoints和整数k，请你返回可以获得的最大点数。
示例 **输入：**cardPoints = [1,2,3,4,5,6,1], k = 3 **输出：**12 **解释：**第一次行动，不管拿哪张牌，你的点数总是 1 。但是，先拿最右边的卡牌将会最大化你的可获得点数。最优策略是拿右边的三张牌，最终点数为 1 + 6 + 5 = 12 。
题解 滑动窗口 如果从左边拿走i个，那么从右边会拿走k-i个，这样i从0到k的最大值就是所求的最大点数。
i=0时，左0，右k。
i=1时，左1，右k-1。
你会发现，有部分值会重复累加，那么我们先把这部分重复累加的值先求出来。
left是从左向右的累加序列，right是从右向左的累加序列。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  func maxScore(cardPoints []int, k int) (ans int) { n := len(cardPoints) var left, right = make([]int, k), make([]int, k) left[0], right[0] = cardPoints[0], cardPoints[n-1] for i := 1; i &amp;lt; k; i++ { left[i] = left[i-1] + cardPoints[i] right[i] = right[i-1] + cardPoints[n-i-1] } left, right = append([]int{0}, left.</description>
    </item>
    
    <item>
      <title>LEETCODE 1208. 尽可能使字符串相等</title>
      <link>https://betterfor.github.io/2021/02/1208/</link>
      <pubDate>Fri, 05 Feb 2021 20:04:57 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/02/1208/</guid>
      <description>大家好，我是沉迷于刷题的小耗。
今天给大家带来的是力扣1208题：尽可能使字符串相等
题目 给你两个长度相同的字符串，s和t。
将s中的第i个字符变到t中的第i个字符需要|s[i]-t[i]|的开销(开销可能为0)，也就是两个字符的ASCII码值的差的绝对值。
用于变更字符串的最大预算是maxCount。在转化字符串时，总开销应当小于等于该预算，这也意味着字符串转化可能是不完全的。
如果你可以将s的子字符串转化为它在t中对应的子字符串，则返回可以转化的最大长度。
示例 输入：s = &amp;ldquo;abcd&amp;rdquo;, t = &amp;ldquo;bcdf&amp;rdquo;, cost = 3 输出：3 解释：s 中的 &amp;ldquo;abc&amp;rdquo; 可以变为 &amp;ldquo;bcd&amp;rdquo;。开销为 3，所以最大长度为 3。
题解 先理解一下题意，s和t是在相同位置上的字符进行比较，|s[i]-t[i]|为一位上的开销，那么我们可以得到每一位的开销。而要从s和t找到一个子串，使得子串的开销之和小于最大开销，并使得子串的长度最长。
二分法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  func equalSubstring(s string, t string, maxCost int) (ans int) { n := len(s) diff := make([]int,n+1) // 递增序列 	for i, ch := range s { diff[i+1] = diff[i]+abs(int(ch)-int(t[i])) } for i := 1; i &amp;lt;= n; i++ { start := sort.</description>
    </item>
    
    <item>
      <title>LEETCODE 424. 替换后的最长重复字符</title>
      <link>https://betterfor.github.io/2021/02/424/</link>
      <pubDate>Tue, 02 Feb 2021 21:31:07 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/02/424/</guid>
      <description>大家好，我是沉迷于刷题的小耗。
今天给大家带来的是力扣424题：替换后的最长重复字符
题目 给你一个仅由大写英文字母组成的字符串，你可以将任意位置上的字符替换成另外的字符，总共可最多替换 k 次。在执行上述操作后，找到包含重复字母的最长子串的长度。
示例 示例 1:
输入: s =&amp;ldquo;ABAB&amp;rdquo;, k = 2
输出: 4
解释: 用两个&amp;quot;A&amp;quot;替换为两个&amp;quot;B&amp;quot;,反之亦然。
示例 2:
输入: s =&amp;ldquo;AABABBA&amp;rdquo;, k = 1
输出: 4
解释: 将中间的一个&amp;quot;A&amp;quot;替换为&amp;quot;B&amp;quot;,字符串变为 &amp;ldquo;AABBBBA&amp;rdquo;。 子串&amp;quot;BBBB&amp;quot;有最长重复字母, 答案为 4。
题解 1、暴力法(不实现)
思路：
 如果子串中所有的字符都一样就延伸子串 如果当前子串出现至少两种字符，就要替换使得所有的字符都一样，并且重复、连续的部分更长。  暴力解法的时间复杂度O(n^3^)。
缺点：
做了很多重复的工作，子串和子串有很多重复的部分，重复扫描了很多次。
2、优化方法
优化字符串查找子串，我们能够想到两种方法，动态规划和滑动窗口。而本题动态规划没有得到明显的递推关系，所以是要用滑动窗口。
所以题目的意思可以转化为
枚举字符串中每个位置作为右端点，然后找到其最左端点的位置，满足该区间内除了出现次数最多的那一类字符外，剩余的字符数量不超过k个。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  func characterReplacement(s string, k int) int { var left,maxCnt int	// maxCnt保存整个循环中，cnt出现的最大值  var cnt [26]int // cnt记录了s[left:right+1]中每个字母出现的次数  // 在循环中，s[left:right+1]  // 要么，maxCnt变大，向右移动一格  // 要么，maxCnt不变，向右移动一格。 	for right, str := range s { cnt[str-&amp;#39;A&amp;#39;]++ maxCnt = max(maxCnt,cnt[str-&amp;#39;A&amp;#39;]) // right-left+1-maxCnt==k的含义是在s[left:right+1]中有maxCnt个相同的字母和k个不相同的字母 	if right - left+1-maxCnt &amp;gt; k { cnt[s[left]-&amp;#39;A&amp;#39;]-- left++ } } return len(s)-left } func max(a, b int) int { if a &amp;gt; b { return a } return b }   复杂度分析 时间复杂度O(n)，n为字符串大小，我们最多遍历字符串一次</description>
    </item>
    
    <item>
      <title>LEETCODE 002. 两数相加</title>
      <link>https://betterfor.github.io/2021/01/002/</link>
      <pubDate>Thu, 28 Jan 2021 16:17:54 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/01/002/</guid>
      <description>众所周知啊，链表题是题库一个比较大的分类。那么今天我们开始解决第一道链表题。
那么什么是链表呢？
1 2 3 4  type ListNode struct { Val int Next *ListNode }   我们通常把这种结构称为链表。
那么链表有什么样的特点呢？
 顺序存储结构 插入和删除只能修改指针，不能随机存取   那么来看看今天的题~
给出两个 非空 的链表用来表示两个非负的整数。 其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
可能看到这里会感觉到云里雾里，来看看一个示例：
这样一看是不是就很清晰明了了。
也就是说我们只要按照链表的顺序相加，如果和大于10，需要进位，所以我们需要一个数 carry 来保存进位数。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  func addTwoNumbers(l1, l2 *ListNode) *ListNode { var head = new(ListNode) current := head var carry int for l1 !</description>
    </item>
    
  </channel>
</rss>
