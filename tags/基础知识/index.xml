<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基础知识 on 月霜天</title>
    <link>https://betterfor.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
    <description>Recent content in 基础知识 on 月霜天</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 09 Dec 2020 10:25:54 +0800</lastBuildDate><atom:link href="https://betterfor.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>常见的数据结构--chan</title>
      <link>https://betterfor.github.io/2020/12/chan/</link>
      <pubDate>Wed, 09 Dec 2020 10:25:54 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/12/chan/</guid>
      <description>介绍一下Golang channel的内部实现，包括channel的数据结构及相关操作的代码实现。
数据结构 1 2 3 4 5 6 7 8 9 10 11 12 13  type hchan struct { qcount uint // 队列中数据的个数 	dataqsiz uint // 队列大小 	buf unsafe.Pointer // 存放数据的环形数组 	elemsize uint16 // channel中数据类型的大小 	closed uint32 // channel是否关闭 	elemtype *_type // 元素数据类型 	sendx uint // send的数组索引 	recvx uint // receive的数组索引 	recvq waitq // &amp;lt;-ch 阻塞在channel上的队列 	sendq waitq // ch&amp;lt;- 阻塞在channel上的队列 	lock mutex }   新建 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  func makechan(t *chantype, size int) *hchan { elem := t.</description>
    </item>
    
    <item>
      <title>常见的数据结构--map</title>
      <link>https://betterfor.github.io/2020/12/map/</link>
      <pubDate>Mon, 07 Dec 2020 11:09:14 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/12/map/</guid>
      <description>很多的业务场景都会用到map，在其他语言可能成为set/集合等，主要就是key:value格式。
1 2 3 4 5 6 7 8 9 10 11 12 13  // A map is just a hash table. The data is arranged // into an array of buckets. Each bucket contains up to // 8 key/elem pairs. The low-order bits of the hash are // used to select a bucket. Each bucket contains a few // high-order bits of each hash to distinguish the entries // within a single bucket.</description>
    </item>
    
    <item>
      <title>常见的数据结构--切片</title>
      <link>https://betterfor.github.io/2020/12/slice/</link>
      <pubDate>Mon, 07 Dec 2020 09:18:56 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/12/slice/</guid>
      <description>在使用过程中，我们经常会用到数组这一数据结构，而在golang中，提供了数组和切片两种，数组是固定长度的且长度为定值，而切片是可以扩张的数组。
本章内容参考 runtime/slice.go
内部数据结构 1 2 3 4 5  type slice struct { array unsafe.Pointer// 数据  len int // 长度  cap int // 容量 }   我们可以通过下面的代码输出slice：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  package main import ( &amp;#34;fmt&amp;#34; &amp;#34;unsafe&amp;#34; ) func main() { data := make([]int,0,3) fmt.</description>
    </item>
    
    <item>
      <title>常见的数据结构--链表</title>
      <link>https://betterfor.github.io/2020/12/list/</link>
      <pubDate>Sun, 06 Dec 2020 15:19:21 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/12/list/</guid>
      <description>提到数据结构，第一个就是链表。通过一组任意的存储单元来存储线性表中的数据元素。
链表 链表：线性表的链式存储
最简单的链表如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  package main import &amp;#34;fmt&amp;#34; type LinkNode struct { data int next *LinkNode } func main() { // 第一个节点 	node1 := new(LinkNode) node1.data = 1 // 第二个节点 	node2 := new(LinkNode) node2.</description>
    </item>
    
    <item>
      <title>golang源码剖析 准备</title>
      <link>https://betterfor.github.io/2020/11/prestudy/</link>
      <pubDate>Wed, 25 Nov 2020 15:25:38 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2020/11/prestudy/</guid>
      <description>语言版本 golang 1.15.5
初学golang 1、go语言之旅
2、搭建开发环境
3、有人喜欢看文档，有人喜欢看视频，各凭喜好，找到自己适合的方式了解语法
4、看一本教程书
5、熟悉与了解标准库
6、实际操作一个项目
这些方法步骤学习资料在其他地方已经有很多了，这里就不赘述了。
参考资料 官方标准库
官方标准库中文版
Go语言标准库 (不全)
gopkg (部分)</description>
    </item>
    
  </channel>
</rss>
