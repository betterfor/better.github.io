<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>简单 on 风落云起</title>
    <link>https://betterfor.github.io/tags/%E7%AE%80%E5%8D%95/</link>
    <description>Recent content in 简单 on 风落云起</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 04 Feb 2021 21:02:28 +0800</lastBuildDate><atom:link href="https://betterfor.github.io/tags/%E7%AE%80%E5%8D%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LEETCODE 003. 无重复字符的最长子串</title>
      <link>https://betterfor.github.io/2021/02/003/</link>
      <pubDate>Thu, 04 Feb 2021 21:02:28 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/02/003/</guid>
      <description>力扣百题系列
 众所周知啊，字符串是力扣题比较大的一个分类。今天我们就来解决第一道字符串题。
题目 给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。
先来考虑一下这道题要我们干什么？
首先抓住几个关键字：重复字符，最长子串。
首先子串是包括英文字母，数字，符号和空格组成的，在一个字符串中找一个小子串，这是不是符合滑动窗口的概念？
用一个例子来展示一下。
字符串abcabcbb,列举出最长子串
 以(a)bcabcbb开始的最长子串为(abc)abcbb 以a(b)cabcbb开始的最长子串为a(bca)bcbb 以ab(c)abcbb开始的最长子串为ab(cab)cbb 以abc(a)bcbb开始的最长子串为abc(abc)bb 以abca(b)cbb开始的最长子串为abca(bc)bb 以abcab(c)bb开始的最长子串为abcab(cb)b 以abcabc(b)b开始的最长子串为abcabc(b)b 以abcabcb(b)开始的最长子串为abcabcb(b)  我们发现依次递增起始子串的位置，那么子串结束位置也是递增的。这是因为我们以字符串中的第k个字符作为起点，并且得到不包含重复子串的结束位置显然大于k。这样我们可以使用双指针法解决这个问题。
双指针法 1、暴力法
按照常规的做法是固定左指针，然后从左指针位置开始向右遍历，找到重复字符为止；然后再向右移动左指针。当然，我们会发现一些重复的字符会被不断访问。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  func lengthOfLongestSubstring(s string) int { var maxLen int for i := 0; i &amp;lt; len(s); i++ { for j := i + 1; j &amp;lt;= len(s); j++ { if isUnique(s[i:j]) { if len(s[i:j]) &amp;gt; maxLen { maxLen = len(s[i:j]) } } else { // 如果该子串重复，继续添加后续字符也还是不重复  break } } } return maxLen } func isUnique(s string) bool { var m = make(map[int32]bool) for _, vChar := range s { if _, ok := m[vChar]; ok { return false } m[vChar] = true } return true }   时间复杂度O(n^3^),空间复杂度O(min(n,m)),我们需要 O(k) 的空间来检查子字符串中是否有重复字符，其中 k 表示 Set 的大小。而 Set 的大小取决于字符串 n 的大小以及字符集/字母 m 的大小。</description>
    </item>
    
    <item>
      <title>LEETCODE 643. 子数组最大平均数I</title>
      <link>https://betterfor.github.io/2021/02/643/</link>
      <pubDate>Thu, 04 Feb 2021 20:47:52 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/02/643/</guid>
      <description>大家好，我是沉迷于刷题的小耗。
今天给大家带来的是力扣643题：子数组最大平均数I
题目 给出n个整数，找出平均数最大且长度为k的连续子数组，并输出该最大平均数。
示例 输入：[1,12,-5,-6,50,3], k = 4 **输出：**12.75 **解释：**最大平均数 (12-5-6+50)/4 = 51/4 = 12.75
题解 先停顿个10秒，考虑一下这道题要考我们什么？
是连续数组的最值，也就是滑动窗口的和。
而遇到滑动窗口的题，我们通常用双指针来表示滑动窗口的左右。
这道题比较简单，只是来求和。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  func findMaxAverage(nums []int, k int) float64 { var sum int for _,num := range nums[:k] { sum += num } ans := sum for i := k; i &amp;lt; len(nums); i++ { sum += nums[i] sum -= nums[i-k] ans = max(ans,sum) } return float64(ans)/float64(k) } func max(a,b int) int { if a &amp;gt; b { return a } return b }   复杂度分析 时间复杂度O(n),其中n是数组nums的长度。遍历数组一次。</description>
    </item>
    
    <item>
      <title>LEETCODE 888. 公平的糖果交换</title>
      <link>https://betterfor.github.io/2021/02/888/</link>
      <pubDate>Mon, 01 Feb 2021 14:00:00 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/02/888/</guid>
      <description>大家好，我是沉迷于刷题的小耗。
今天给大家带来的是力扣888题：公平的糖果棒交换
题目 爱丽丝和鲍勃有不同大小的糖果棒：A[i] 是爱丽丝拥有的第 i 块糖的大小，B[j] 是鲍勃拥有的第 j 块糖的大小。
因为他们是朋友，所以他们想交换一个糖果棒，这样交换后，他们都有相同的糖果总量。（一个人拥有的糖果总量是他们拥有的糖果棒大小的总和。）
返回一个整数数组 ans ，其中 ans[0] 是爱丽丝必须交换的糖果棒的大小，ans[1] 是 Bob 必须交换的糖果棒的大小。
如果有多个答案，你可以返回其中任何一个。保证答案存在。
示例 题解 这是一道简单题，很明显我们可以有一个思路，既然答案确定存在，那么最终两个的糖果数相等，那么记爱丽丝的糖果棒总数为 sumA,鲍勃的糖果棒总数为 sumB,记最终答案为{x,y},即爱丽丝的大小为x的糖果棒和鲍勃的大小为y的糖果棒交换，有等式
$$ sumA-x+y=sumB+x-y $$ 化简，得: $$ x=y+(sumA-sumB)/2 $$
为了快速查询A中是否存在某个数，可以先将A中的数字放入哈希表中，然后遍历B
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  func fairCandySwap(A []int, B []int) []int { var sumA,sumB int var mapA = make(map[int]struct{},len(A)) for _, a := range A { sumA += a mapA[a] = struct{}{} } for _, b := range B { sumB += b } diff := (sumA- sumB)/2 for _, b := range B { a := b+diff if _, ok := mapA[a]; ok { return []int{a,b} } } return nil }   复杂度分析 时间复杂度: O(m+n),m是A的长度,n是B的长度</description>
    </item>
    
    <item>
      <title>LEETCODE 001. 两数之和</title>
      <link>https://betterfor.github.io/2021/01/001/</link>
      <pubDate>Thu, 28 Jan 2021 14:25:18 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/01/001/</guid>
      <description>众所周知啊，leetcode有一道&amp;quot;神题&amp;quot;，有多神呢？来看一组数据
超过百万的提交，通过率达到一半!!!
那么这道题是哪一题呢？相信很多聪明的小伙伴已经猜出来了，就是第一题。
俗话说，万事开头难，只要肯放弃，只要肯攀登。
那么今天，我们就来看看这道题到底有多难。
 请看题
给定一个整数数组nums和一个整数目标值target， 请你在该数组中找出和为目标值的那两个整数， 并返回它们的数组下标。
咦~，看起来好像很简单，我们只要让每个数和他后面的数依次相加，比较target，就能得到结果。
话不多说，立刻来手写代码
1 2 3 4 5 6 7 8 9 10  func twoSum(nums []int,target int) []int { for i := 0; i &amp;lt; len(nums); i++ { for j := i+1; j &amp;lt; len(nums); j++ { if nums[i] + nums[j] == target { return []int{i,j} } } } return nil }   执行-&amp;gt;提交
有问题~ 属实有问题~
居然还有将近8%的用户超过了这方法， 这可是时间复杂度达到O(n^2^),空间复杂度达到O(1)的暴力法啊。
那要怎么超过其他人呢？</description>
    </item>
    
  </channel>
</rss>
