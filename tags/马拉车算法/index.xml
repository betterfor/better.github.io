<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>马拉车算法 on 风落云起</title>
    <link>https://betterfor.github.io/tags/%E9%A9%AC%E6%8B%89%E8%BD%A6%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 马拉车算法 on 风落云起</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 06 Feb 2021 21:20:19 +0800</lastBuildDate><atom:link href="https://betterfor.github.io/tags/%E9%A9%AC%E6%8B%89%E8%BD%A6%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LEETCODE 005. 最长回文串</title>
      <link>https://betterfor.github.io/2021/02/005/</link>
      <pubDate>Sat, 06 Feb 2021 21:20:19 +0800</pubDate>
      
      <guid>https://betterfor.github.io/2021/02/005/</guid>
      <description>力扣百题系列
 大家好，我是小耗。
今天给大家带来的是经典题之回文串。
什么是回文串？正着读和反着读都是一样的字符串就是回文串，例如level。
题目 给一个字符串s，找出s中最长的回文子串。
题解 1、暴力法
判断一个字符串是否是回文串，然后再找出所有的回文子串。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  func longestPalindrome(s string) string { var maxLen int var maxStr string for i := 0; i &amp;lt; len(s); i++ { for j := i + 1; j &amp;lt; len(s)+1; j++ { len := isPalindrome(s[i:j]) if len &amp;gt; maxLen { maxStr = s[i:j] maxLen = len } } } return maxStr } func isPalindrome(s string) int { var newStr string for i := len(s)-1; i &amp;gt;= 0; i--{ newStr += s[i:i+1] } if s == newStr { return len(s) } return 0 }   时间复杂度O(n^3^)，空间复杂度O(1)。</description>
    </item>
    
  </channel>
</rss>
